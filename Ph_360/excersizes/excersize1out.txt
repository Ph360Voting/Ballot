Help on class linkedList in module __main__:

class linkedList(builtins.object)
 |  Linked list class.
 |  
 |  Attributes:
 |      head  (Node): This is the head of the linked list
 |      length (int): This is the length of the list
 |  
 |  Methods defined here:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  deepCopy1(self)
 |      Deep Copies the list with a runtime of O(n^2).
 |  
 |  deepCopy2(self)
 |      Deep Copies the list with runtime of O(n).
 |  
 |  insertAtNode(self, exist, key)
 |      Add a node with data 'key' after existing node with data 'exist'.
 |  
 |  insertHead(self, key)
 |      Adds a node to the front of the list with data 'key'.
 |  
 |  insertTail(self, key)
 |      Adds a node to the end of the list with data 'key'.
 |  
 |  listLength(self)
 |      Returns the length of the list.
 |  
 |  printList(self)
 |      Prints the data of the nodes in the list from head to tail.
 |  
 |  removeNode(self, key)
 |      Removes first node to have data 'key' from the list.
 |  
 |  reverseList(self)
 |      Reverses the order of the list.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)

Adding 10 nodes to list, printing updated list each time: 
Head!
Head! -> Tail!
NewHead! -> Head! -> Tail!
NewHead! -> Head! -> Alice -> Tail!
NewHead! -> Head! -> Alice -> Tail! -> Zebra
NewHead! -> Head! -> Alice -> Bob -> Tail! -> Zebra
BabyBoss -> NewHead! -> Head! -> Alice -> Bob -> Tail! -> Zebra
BabyBoss -> NewHead! -> Head! -> Alice -> Bob -> Wagamama -> Tail! -> Zebra
BabyBoss -> NewHead! -> Head! -> Alice -> Bob -> Wagamama -> Tail! -> Zebra -> Taylor
BabyBoss -> NewHead! -> Head! -> Alice -> John -> Bob -> Wagamama -> Tail! -> Zebra -> Taylor

List length: 10

Removing head node, a node in the middle, and tail node:
NewHead! -> Alice -> John -> Bob -> Wagamama -> Tail! -> Zebra

New list length: 7

Reversing List: 
Zebra -> Tail! -> Wagamama -> Bob -> John -> Alice -> NewHead!

Deep copying List:
Original list: Zebra -> Tail! -> Wagamama -> Bob -> John -> Alice -> NewHead!
New list 1: Zebra -> Tail! -> Wagamama -> Bob -> John -> Alice -> NewHead!
New list 2: Zebra -> Tail! -> Wagamama -> Bob -> John -> Alice -> NewHead!

Removing tail from original list: Zebra -> Tail! -> Wagamama -> Bob -> John -> Alice
But new list 1 is unchanged: Zebra -> Tail! -> Wagamama -> Bob -> John -> Alice -> NewHead!
As is list 2: Zebra -> Tail! -> Wagamama -> Bob -> John -> Alice -> NewHead!
