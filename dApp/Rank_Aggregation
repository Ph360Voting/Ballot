//input: vote vector from the transaction
//output: result vector
//Plurality - the candidate that is ranked first most often
//Veto - the candidate that is ranked last least often
//Borda - allot points to each vote


//Each candidate must have an array of size corresponding to the number of total candidates.  When a transaction
//is uploaded, it will contain an array equal in size with a rating.  The contract must parse the array and up the counter (depends on
//the value of the numebr of the corresponding candidate/based on position.
//ex: can vote for free, tuition, half. Each of the three candidates have an array of length 3. The array indexing corresponds to ranking from
//1 to 3, with 1 being the most desired. array[0] = number of times ranked 1 etc.
//If I am voting, and placing a transaction, I will upload a sample array: [1, 3, 2].  This means my first choice is free, second choice is
//half, last choice is tuition.  The smart contract must increment by one the array of free, position 0, the array of tuition, position 2 and the 
//array of half, position 1. 

//Plurality:
//returns the candidate with the highest value in their array[0].  Must access each of the values and compare.
//Veto:
//returns the candidate with the lowest value in the last position of their array.
//Borda:
//multiplies each position of each candidates array by decreasing integers, starting with the total number of candidates.  Then returns
//the candidate with the highest "score"
